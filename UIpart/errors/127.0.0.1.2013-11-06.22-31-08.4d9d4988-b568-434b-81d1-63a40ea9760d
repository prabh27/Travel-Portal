(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> cannot concatenate 'str' and 'NoneType' objects"
p3
sS'layer'
p4
S'/home/ayush/Desktop/web2py/applications/ssad/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    response.flash = "Welcome to web2py!"\n    return dict(message=T(\'Hello World\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n\nimport datetime\ndef index():\n\tform=SQLFORM.factory(\n\t\t\tField(\'From\',requires=IS_IN_DB(db,db.places.body)),\n\t\t\tField(\'To\',requires=IS_IN_DB(db,db.places.body)),\n\t\t\tField(\'d\',\'date\',label=\'Date of journey\',requires=IS_DATE()),\n\t\t\tField(\'seats\',label=\'Number of passengers\',requires=IS_IN_SET((1,2,3,4,5,6,7,8,9,10))))\n\tif form.accepts(request.vars,session):\n\t\tif form.vars.From == form.vars.To:\n\t\t\tsession.flash="Source and Destination should not be the same!"\n\t\t\tredirect(URL(\'index\'))\n\t\tif form.vars.d<datetime.date.today():\n\t\t\tsession.flash="Enter a valid date!"\n\t\t\tredirect(URL(\'index\'))\n\t\telse:\n\t\t\tredirect(URL(\'search\',args=(request.vars.From,request.vars.To,request.vars.d,request.vars.seats)))\n\treturn dict(form=form)\n\ndef search():\n\tsrc=db((db.trips.src==request.args(0))&(db.trips.d==request.args(2))).select()\n\tdest=db(db.trips.dest==request.args(1)).select()\n    \tif len(src)==0 or len(dest)==0:\n       \t \tsession.flash="No Trips Found! :( "\n        \tredirect(URL(\'index\'))\n\tlis=[]\n\tfor i in range(0,len(dest)):\n\t\tque=dest[i].name\n\t\tfor j in range(len(src)):\n\t\t\tif que==src[j].name:\n\t\t\t\tlis.append(que)\n\tif len(lis)==0:\n\t  \tsession.flash="No trips found!"\n\t  \tredirect(URL(\'index\'))\n\tseats=[]\n\tprice=[]\n\tlogo=[]\n\tdtime=[]\n\tatime=[]\n\tn=[]\n\tfor i in range(len(lis)):\n\t\tsend=[]\n\t\tsome=db((db.trips.name==lis[i])&(db.trips.src==request.args(0))).select()\n\t\tif len(some):\n\t\t\tsend.append(some[0].id)\n\t\t\tdesti=some[0].dest\n\t\t\tm=some[0].seats\n\t\t\tp=some[0].price\n\t\t\tdtime.append(some[0].departure)\n\t\t\twhile desti!=request.args(1):\n\t\t\t\tsome=db((db.trips.name==lis[i])&(db.trips.src==desti)).select()\n\t\t\t\tif len(some):\n\t\t\t\t\tdesti=some[0].dest\n\t\t\t\t\tif some[0].seats<m:\n\t\t\t\t\t\tm=some[0].seats\n\t\t\t\t\tp+=some[0].price\n\t\t\t\t\tsend.append(some[0].id)\n\t\t\t\telse:\n\t\t\t\t\tsession.flash="No trips Found!"\n\t\t\t\t\tredirect(URL(\'index\'))\n\t\t\tatime.append(some[0].arrival)\n\t\t\tn.append(send)\n\t\t\tlogo.append(some[0].logo)\n\t\t\tseats.append(m)\n\t\t\tprice.append(p)\n\t\telse:\n\t\t\tsession.flash="No trips found!"\n\t\t\tredirect(URL(\'index\'))\n\tl=len(lis)\n\tfor i in range(l):\n\t\tif seats[i]<int(request.args(3)):\n\t\t\tseats.remove(seats[i])\n\t\t\tprice.remove(price[i])\n\t\t\tlogo.remove(logo[i])\n\t\t\tatime.remove(atime[i])\n\t\t\tdtime.remove(dtime[i])\n\t\t\tlis.remove(lis[i])\n\treturn dict(lis=lis,seats=seats,n=n,price=price,dtime=dtime,atime=atime,logo=logo)\n\nimport time\n@auth.requires_login()\ndef confirm():\n\treturn dict()\t\n\n\nfrom gluon.tools import Mail\nmail = Mail()\nmail.settings.server = \'smtp.gmail.com:587\'\nmail.settings.sender = \'Traveller\\\'s paradise\'\nmail.settings.login = \'ayushkhandelwal115@gmail.com:ayush115\'\ndef book():\n\n\tn=request.vars.send\n\tred=db(db.trips.name==request.vars.lis).select()\n\tfor i in range(len(n)):\n\t\tseats=db(db.trips.id==n[i]).select()\n\t\tseat=seats[0].seats\n\t\tdb(db.trips.id==n[i]).update(seats=seat-int(request.vars.seats))\n\t\n\temail=auth.user.email\n\tmail.send(to=[email],\n\t\t\tsubject=\'Ticket booked!\',\n\t\t\tmessage=\'Flight id :\'+request.vars.name+\'\\nDeparture time : \'+request.vars.dtime+\'\\nArrival time : \'+request.vars.atime+\'\\nNumber of seats : \'+request.vars.seats+\'\\n\')\n\n\tsession.flash="Your ticket has been booked!"\n\tredirect(URL(\'index\'))\n\t\n\n@auth.requires_login()\t\ndef manage():\n\tif (auth.user.Member_Type!=\'admin\'):\n\t\tredirect (URL(\'index\'))\n\t\tsession.flash(\'Only the site adin can access this page!\')\n\tform=SQLFORM(db.trips)\n\tif form.accepts(request.vars,session):\n\t\tsession.flash="something"\n\t\tredirect(URL(\'manage\'))\n\tform2=SQLFORM(db.hotels)\n\tif (form.accepts(request.vars,session)):\n\t\tsession.flash="Hotel added!!Good Work"\n\t\tredirect(URL(\'manage\'))\n\tform3=SQLFORM(db.places)\n\tif (form.accepts(request.vars,session)):\n\t\tsession.flash="New Place added in the database!(y)"\n\t\tredirect(URL(\'manage\'))\n\treturn dict(form=form,form2=form2,form3=form3)\n\nimport urllib\nimport json\nfrom pprint import pprint\nimport datetime\ndef hotel_search():\n\tform=SQLFORM.factory(\n\t\tField(\'city\',requires=IS_IN_DB(db,db.places.body)),\n\t\tField(\'arrivalDate\',\'date\'),\n\t\tField(\'departDate\',\'date\'),\n\t\tField(\'adults\',requires=IS_IN_SET((1,2,3,4,5,6))))\n\tif form.accepts(request.vars,session):\n\t\tcity=form.vars.city\n\t\tarrivalDate=form.vars.arrivalDate.strftime("%m/%d/%Y")\n\t\tdepartDate=form.vars.departDate.strftime("%m/%d/%Y")\n\t\tadults=form.vars.adults\n\t\tredirect(URL(r=request,f=\'search_result\',args=(city,arrivalDate,departDate,adults)))\n\treturn dict(form=form)\n\ndef search_result():\n\tlink="http://api.ean.com/ean-services/rs/hotel/v3/list?&cid=55505&apiKey=nmtccjsdemu6hkg73wcct44t&xml=%3CHotelListRequest%3E%3Ccity%3E"+request.args(0)+"%3C/city%3E%3CcountryCode%3EIN%3C/countryCode%3E%3CarrivalDate%3E"+request.args(1)+"%3C/arrivalDate%3E%3CdepartureDate%3E"+request.args(2)+"%3C/departureDate%3E%3CRoomGroup%3E%3CRoom%3E%3CnumberOfAdults%3E"+str(request.args(3))+"%3C/numberOfAdults%3E%3C/Room%3E%3C/RoomGroup%3E%3CnumberOfResults%3E100%3C/numberOfResults%3E%3CsupplierCacheTolerance%3EMED_ENHANCED%3C/supplierCacheTolerance%3E%3C/HotelListRequest%3E"\n\ta=urllib.urlopen(link)\n\tdata = json.loads(a.read())\n\tli=data["HotelListResponse"]["HotelList"]["HotelSummary"]\n#\tfor l in range(len(li)):\n#\t\t        print li[l]["name"]\n\treturn dict(li=li)\n\ndef hotel_desc():\n\tlink="api.ean.com/ean-services/rs/hotel/v3/avail?cid=55505&apiKey=nmtccjsdemu6hkg73wcct44t&locale=en_US&xml=<HotelRoomAvailabilityRequest><hotelId>"+request.args(0)+"</hotelId><arrivalDate>"+request.args(1)+"</arrivalDate><departureDate>"+request.args(2)+"</departureDate><RoomGroup><Room><numberOfAdults>2</numberOfAdults></Room></RoomGroup><includeDetails>true</includeDetails><includeRoomImages>true</includeRoomImages></HotelRoomAvailabilityRequest>"\n\ta=urllib.urlopen(link)\n\tdata=json.loads(a.read())\n\nresponse._vars=response._caller(hotel_desc)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ayush/Desktop/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/ayush/Desktop/web2py/applications/ssad/controllers/default.py", line 231, in <module>\n  File "/home/ayush/Desktop/web2py/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ayush/Desktop/web2py/applications/ssad/controllers/default.py", line 227, in hotel_desc\n    link="api.ean.com/ean-services/rs/hotel/v3/avail?cid=55505&apiKey=nmtccjsdemu6hkg73wcct44t&locale=en_US&xml=<HotelRoomAvailabilityRequest><hotelId>"+request.args(0)+"</hotelId><arrivalDate>"+request.args(1)+"</arrivalDate><departureDate>"+request.args(2)+"</departureDate><RoomGroup><Room><numberOfAdults>2</numberOfAdults></Room></RoomGroup><includeDetails>true</includeDetails><includeRoomImages>true</includeRoomImages></HotelRoomAvailabilityRequest>"\nTypeError: cannot concatenate \'str\' and \'NoneType\' objects\n'
p11
s.